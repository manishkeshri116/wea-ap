{"ast":null,"code":"// src/api/weatherApi.js\nimport axios from 'axios';\nconst API_KEY = '958283c50ea8aae0e2a1a504cc8fa0dd'; // Replace with your OpenWeatherMap API key\nconst CURRENT_WEATHER_URL = 'https://api.openweathermap.org/data/2.5/weather';\nconst FORECAST_URL = 'https://api.openweathermap.org/data/2.5/forecast';\nexport const fetchWeatherData = async city => {\n  try {\n    const response = await axios.get(CURRENT_WEATHER_URL, {\n      params: {\n        q: city,\n        units: 'metric',\n        appid: API_KEY\n      }\n    });\n    return {\n      temperature: response.data.main.temp,\n      humidity: response.data.main.humidity,\n      windSpeed: response.data.wind.speed,\n      weatherDescription: response.data.weather[0].description\n    };\n  } catch (error) {\n    console.error('Error fetching weather data:', error); // Log error for debugging\n    throw error;\n  }\n};\nexport const fetchForecastData = async city => {\n  try {\n    const response = await axios.get(FORECAST_URL, {\n      params: {\n        q: city,\n        units: 'metric',\n        appid: API_KEY\n      }\n    });\n    const forecastList = response.data.list.map(item => ({\n      date: new Date(item.dt * 1000).toLocaleDateString(),\n      temperature: item.main.temp,\n      weatherDescription: item.weather[0].description,\n      precipitation: item.pop * 100\n    }));\n    const dailyForecast = [];\n    const dateSet = new Set();\n    for (const item of forecastList) {\n      if (!dateSet.has(item.date)) {\n        dateSet.add(item.date);\n        dailyForecast.push(item);\n      }\n    }\n    return dailyForecast;\n  } catch (error) {\n    console.error('Error fetching forecast data:', error); // Log error for debugging\n    throw error;\n  }\n};","map":{"version":3,"names":["axios","API_KEY","CURRENT_WEATHER_URL","FORECAST_URL","fetchWeatherData","city","response","get","params","q","units","appid","temperature","data","main","temp","humidity","windSpeed","wind","speed","weatherDescription","weather","description","error","console","fetchForecastData","forecastList","list","map","item","date","Date","dt","toLocaleDateString","precipitation","pop","dailyForecast","dateSet","Set","has","add","push"],"sources":["E:/weather/weather-dashboard-app/src/api/weatherApi.js"],"sourcesContent":["// src/api/weatherApi.js\r\nimport axios from 'axios';\r\n\r\nconst API_KEY = '958283c50ea8aae0e2a1a504cc8fa0dd'; // Replace with your OpenWeatherMap API key\r\nconst CURRENT_WEATHER_URL = 'https://api.openweathermap.org/data/2.5/weather';\r\nconst FORECAST_URL = 'https://api.openweathermap.org/data/2.5/forecast';\r\n\r\nexport const fetchWeatherData = async (city) => {\r\n  try {\r\n    const response = await axios.get(CURRENT_WEATHER_URL, {\r\n      params: {\r\n        q: city,\r\n        units: 'metric',\r\n        appid: API_KEY,\r\n      },\r\n    });\r\n    return {\r\n      temperature: response.data.main.temp,\r\n      humidity: response.data.main.humidity,\r\n      windSpeed: response.data.wind.speed,\r\n      weatherDescription: response.data.weather[0].description,\r\n    };\r\n  } catch (error) {\r\n    console.error('Error fetching weather data:', error); // Log error for debugging\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const fetchForecastData = async (city) => {\r\n  try {\r\n    const response = await axios.get(FORECAST_URL, {\r\n      params: {\r\n        q: city,\r\n        units: 'metric',\r\n        appid: API_KEY,\r\n      },\r\n    });\r\n    const forecastList = response.data.list.map((item) => ({\r\n      date: new Date(item.dt * 1000).toLocaleDateString(),\r\n      temperature: item.main.temp,\r\n      weatherDescription: item.weather[0].description,\r\n      precipitation: item.pop * 100,\r\n    }));\r\n\r\n    const dailyForecast = [];\r\n    const dateSet = new Set();\r\n    for (const item of forecastList) {\r\n      if (!dateSet.has(item.date)) {\r\n        dateSet.add(item.date);\r\n        dailyForecast.push(item);\r\n      }\r\n    }\r\n\r\n    return dailyForecast;\r\n  } catch (error) {\r\n    console.error('Error fetching forecast data:', error); // Log error for debugging\r\n    throw error;\r\n  }\r\n};\r\n"],"mappings":"AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAG,kCAAkC,CAAC,CAAC;AACpD,MAAMC,mBAAmB,GAAG,iDAAiD;AAC7E,MAAMC,YAAY,GAAG,kDAAkD;AAEvE,OAAO,MAAMC,gBAAgB,GAAG,MAAOC,IAAI,IAAK;EAC9C,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMN,KAAK,CAACO,GAAG,CAACL,mBAAmB,EAAE;MACpDM,MAAM,EAAE;QACNC,CAAC,EAAEJ,IAAI;QACPK,KAAK,EAAE,QAAQ;QACfC,KAAK,EAAEV;MACT;IACF,CAAC,CAAC;IACF,OAAO;MACLW,WAAW,EAAEN,QAAQ,CAACO,IAAI,CAACC,IAAI,CAACC,IAAI;MACpCC,QAAQ,EAAEV,QAAQ,CAACO,IAAI,CAACC,IAAI,CAACE,QAAQ;MACrCC,SAAS,EAAEX,QAAQ,CAACO,IAAI,CAACK,IAAI,CAACC,KAAK;MACnCC,kBAAkB,EAAEd,QAAQ,CAACO,IAAI,CAACQ,OAAO,CAAC,CAAC,CAAC,CAACC;IAC/C,CAAC;EACH,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC,CAAC,CAAC;IACtD,MAAMA,KAAK;EACb;AACF,CAAC;AAED,OAAO,MAAME,iBAAiB,GAAG,MAAOpB,IAAI,IAAK;EAC/C,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMN,KAAK,CAACO,GAAG,CAACJ,YAAY,EAAE;MAC7CK,MAAM,EAAE;QACNC,CAAC,EAAEJ,IAAI;QACPK,KAAK,EAAE,QAAQ;QACfC,KAAK,EAAEV;MACT;IACF,CAAC,CAAC;IACF,MAAMyB,YAAY,GAAGpB,QAAQ,CAACO,IAAI,CAACc,IAAI,CAACC,GAAG,CAAEC,IAAI,KAAM;MACrDC,IAAI,EAAE,IAAIC,IAAI,CAACF,IAAI,CAACG,EAAE,GAAG,IAAI,CAAC,CAACC,kBAAkB,CAAC,CAAC;MACnDrB,WAAW,EAAEiB,IAAI,CAACf,IAAI,CAACC,IAAI;MAC3BK,kBAAkB,EAAES,IAAI,CAACR,OAAO,CAAC,CAAC,CAAC,CAACC,WAAW;MAC/CY,aAAa,EAAEL,IAAI,CAACM,GAAG,GAAG;IAC5B,CAAC,CAAC,CAAC;IAEH,MAAMC,aAAa,GAAG,EAAE;IACxB,MAAMC,OAAO,GAAG,IAAIC,GAAG,CAAC,CAAC;IACzB,KAAK,MAAMT,IAAI,IAAIH,YAAY,EAAE;MAC/B,IAAI,CAACW,OAAO,CAACE,GAAG,CAACV,IAAI,CAACC,IAAI,CAAC,EAAE;QAC3BO,OAAO,CAACG,GAAG,CAACX,IAAI,CAACC,IAAI,CAAC;QACtBM,aAAa,CAACK,IAAI,CAACZ,IAAI,CAAC;MAC1B;IACF;IAEA,OAAOO,aAAa;EACtB,CAAC,CAAC,OAAOb,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC,CAAC,CAAC;IACvD,MAAMA,KAAK;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}