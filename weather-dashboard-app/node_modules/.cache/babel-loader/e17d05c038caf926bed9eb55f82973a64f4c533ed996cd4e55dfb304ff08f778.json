{"ast":null,"code":"// src/api/weatherApi.js\nimport axios from 'axios';\nconst API_KEY = '557b6f1c98f84f9e9930c05a0c5ea558'; // Replace with your OpenWeatherMap API key\nconst CURRENT_WEATHER_URL = 'https://api.openweathermap.org/data/2.5/weather';\nconst FORECAST_URL = 'https://api.openweathermap.org/data/2.5/forecast';\n\n// Fetch current weather data for a city\nexport const fetchWeatherData = async city => {\n  const response = await axios.get(CURRENT_WEATHER_URL, {\n    params: {\n      q: city,\n      units: 'metric',\n      appid: API_KEY\n    }\n  });\n  return {\n    temperature: response.data.main.temp,\n    humidity: response.data.main.humidity,\n    windSpeed: response.data.wind.speed,\n    weatherDescription: response.data.weather[0].description\n  };\n};\n\n// Fetch 7-day forecast data for a city\nexport const fetchForecastData = async city => {\n  const response = await axios.get(FORECAST_URL, {\n    params: {\n      q: city,\n      units: 'metric',\n      appid: API_KEY\n    }\n  });\n  const forecastList = response.data.list.map(item => ({\n    date: new Date(item.dt * 1000).toLocaleDateString(),\n    temperature: item.main.temp,\n    weatherDescription: item.weather[0].description,\n    precipitation: item.pop * 100\n  }));\n\n  // Reduce the list to get one entry per day\n  const dailyForecast = [];\n  const dateSet = new Set();\n  for (const item of forecastList) {\n    if (!dateSet.has(item.date)) {\n      dateSet.add(item.date);\n      dailyForecast.push(item);\n    }\n  }\n  return dailyForecast;\n};","map":{"version":3,"names":["axios","API_KEY","CURRENT_WEATHER_URL","FORECAST_URL","fetchWeatherData","city","response","get","params","q","units","appid","temperature","data","main","temp","humidity","windSpeed","wind","speed","weatherDescription","weather","description","fetchForecastData","forecastList","list","map","item","date","Date","dt","toLocaleDateString","precipitation","pop","dailyForecast","dateSet","Set","has","add","push"],"sources":["E:/weather/weather-dashboard-app/src/api/weatherApi.js"],"sourcesContent":["// src/api/weatherApi.js\r\nimport axios from 'axios';\r\n\r\nconst API_KEY = '557b6f1c98f84f9e9930c05a0c5ea558'; // Replace with your OpenWeatherMap API key\r\nconst CURRENT_WEATHER_URL = 'https://api.openweathermap.org/data/2.5/weather';\r\nconst FORECAST_URL = 'https://api.openweathermap.org/data/2.5/forecast';\r\n\r\n// Fetch current weather data for a city\r\nexport const fetchWeatherData = async (city) => {\r\n  const response = await axios.get(CURRENT_WEATHER_URL, {\r\n    params: {\r\n      q: city,\r\n      units: 'metric',\r\n      appid: API_KEY,\r\n    },\r\n  });\r\n  return {\r\n    temperature: response.data.main.temp,\r\n    humidity: response.data.main.humidity,\r\n    windSpeed: response.data.wind.speed,\r\n    weatherDescription: response.data.weather[0].description,\r\n  };\r\n};\r\n\r\n// Fetch 7-day forecast data for a city\r\nexport const fetchForecastData = async (city) => {\r\n  const response = await axios.get(FORECAST_URL, {\r\n    params: {\r\n      q: city,\r\n      units: 'metric',\r\n      appid: API_KEY,\r\n    },\r\n  });\r\n  const forecastList = response.data.list.map((item) => ({\r\n    date: new Date(item.dt * 1000).toLocaleDateString(),\r\n    temperature: item.main.temp,\r\n    weatherDescription: item.weather[0].description,\r\n    precipitation: item.pop * 100,\r\n  }));\r\n\r\n  // Reduce the list to get one entry per day\r\n  const dailyForecast = [];\r\n  const dateSet = new Set();\r\n  for (const item of forecastList) {\r\n    if (!dateSet.has(item.date)) {\r\n      dateSet.add(item.date);\r\n      dailyForecast.push(item);\r\n    }\r\n  }\r\n\r\n  return dailyForecast;\r\n};\r\n"],"mappings":"AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAG,kCAAkC,CAAC,CAAC;AACpD,MAAMC,mBAAmB,GAAG,iDAAiD;AAC7E,MAAMC,YAAY,GAAG,kDAAkD;;AAEvE;AACA,OAAO,MAAMC,gBAAgB,GAAG,MAAOC,IAAI,IAAK;EAC9C,MAAMC,QAAQ,GAAG,MAAMN,KAAK,CAACO,GAAG,CAACL,mBAAmB,EAAE;IACpDM,MAAM,EAAE;MACNC,CAAC,EAAEJ,IAAI;MACPK,KAAK,EAAE,QAAQ;MACfC,KAAK,EAAEV;IACT;EACF,CAAC,CAAC;EACF,OAAO;IACLW,WAAW,EAAEN,QAAQ,CAACO,IAAI,CAACC,IAAI,CAACC,IAAI;IACpCC,QAAQ,EAAEV,QAAQ,CAACO,IAAI,CAACC,IAAI,CAACE,QAAQ;IACrCC,SAAS,EAAEX,QAAQ,CAACO,IAAI,CAACK,IAAI,CAACC,KAAK;IACnCC,kBAAkB,EAAEd,QAAQ,CAACO,IAAI,CAACQ,OAAO,CAAC,CAAC,CAAC,CAACC;EAC/C,CAAC;AACH,CAAC;;AAED;AACA,OAAO,MAAMC,iBAAiB,GAAG,MAAOlB,IAAI,IAAK;EAC/C,MAAMC,QAAQ,GAAG,MAAMN,KAAK,CAACO,GAAG,CAACJ,YAAY,EAAE;IAC7CK,MAAM,EAAE;MACNC,CAAC,EAAEJ,IAAI;MACPK,KAAK,EAAE,QAAQ;MACfC,KAAK,EAAEV;IACT;EACF,CAAC,CAAC;EACF,MAAMuB,YAAY,GAAGlB,QAAQ,CAACO,IAAI,CAACY,IAAI,CAACC,GAAG,CAAEC,IAAI,KAAM;IACrDC,IAAI,EAAE,IAAIC,IAAI,CAACF,IAAI,CAACG,EAAE,GAAG,IAAI,CAAC,CAACC,kBAAkB,CAAC,CAAC;IACnDnB,WAAW,EAAEe,IAAI,CAACb,IAAI,CAACC,IAAI;IAC3BK,kBAAkB,EAAEO,IAAI,CAACN,OAAO,CAAC,CAAC,CAAC,CAACC,WAAW;IAC/CU,aAAa,EAAEL,IAAI,CAACM,GAAG,GAAG;EAC5B,CAAC,CAAC,CAAC;;EAEH;EACA,MAAMC,aAAa,GAAG,EAAE;EACxB,MAAMC,OAAO,GAAG,IAAIC,GAAG,CAAC,CAAC;EACzB,KAAK,MAAMT,IAAI,IAAIH,YAAY,EAAE;IAC/B,IAAI,CAACW,OAAO,CAACE,GAAG,CAACV,IAAI,CAACC,IAAI,CAAC,EAAE;MAC3BO,OAAO,CAACG,GAAG,CAACX,IAAI,CAACC,IAAI,CAAC;MACtBM,aAAa,CAACK,IAAI,CAACZ,IAAI,CAAC;IAC1B;EACF;EAEA,OAAOO,aAAa;AACtB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}